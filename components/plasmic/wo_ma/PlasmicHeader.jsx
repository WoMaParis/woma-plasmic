// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vNYHYdba5dDm6wfqFaSoQa
// Component: RqdZFOU7xxIy
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: urVVrEAjQyoZ/component
import LinkButton from "../../LinkButton"; // plasmic-import: 6vEjUyLNvQQ4/component
import IconLink from "../../IconLink"; // plasmic-import: MBWgER5ex-gd/component
import { useScreenVariants as useScreenVariantswIvKq52ZWu34 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WIvKq52ZWu34/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_wo_ma.module.css"; // plasmic-import: vNYHYdba5dDm6wfqFaSoQa/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: RqdZFOU7xxIy/css
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: JpTbBLhgpaUJ/icon
import CogIcon from "./icons/PlasmicIcon__Cog"; // plasmic-import: 9_GL8XWwZ-q5/icon
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: q3XUa0zBBzVx/icon

createPlasmicElementProxy;

export const PlasmicHeader__VariantProps = new Array("expanded");

export const PlasmicHeader__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "expanded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.expanded
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswIvKq52ZWu34()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        { [sty.rootexpanded]: hasVariant($state, "expanded", "expanded") }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xpCwp)}
      >
        <MenuButton
          data-plasmic-name={"menuButton"}
          data-plasmic-override={overrides.menuButton}
          className={classNames("__wab_instance", sty.menuButton, {
            [sty.menuButtonexpanded]: hasVariant($state, "expanded", "expanded")
          })}
          expanded={
            hasVariant($state, "expanded", "expanded") &&
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : undefined
          }
        />

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={"/"}
          platform={"nextjs"}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            src={{
              src: "/plasmic/wo_ma/images/plasmic.png",
              fullWidth: 3216,
              fullHeight: 624,
              aspectRatio: undefined
            }}
          />
        </p.PlasmicLink>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__o99E, {
            [sty.freeBoxexpanded__o99EkEa9]: hasVariant(
              $state,
              "expanded",
              "expanded"
            )
          })}
        >
          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__wqpl3)}
            href={"/#home"}
            size={"small"}
            text={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dvLG
                )}
              >
                {"Pass"}
              </div>
            }
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__rr6Ak)}
            href={"/#new-arrival"}
            size={"small"}
            text={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oe8ZW
                )}
              >
                {"Machines"}
              </div>
            }
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__orKvo)}
            href={"/#features"}
            size={"small"}
            text={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nqqH
                )}
              >
                {"Accompagnement"}
              </div>
            }
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__eDy3E)}
            href={"/#blog"}
            size={"small"}
            text={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xefSp
                )}
              >
                {"Privatisations"}
              </div>
            }
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__j7TBj)}
            href={"/#contact"}
            size={"small"}
            text={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bfQOr
                )}
              >
                {"Contact"}
              </div>
            }
            type={"blankGray"}
          />
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__c8SMg)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__ptyBf)}
            icon={
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__jfg0W)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__vt49J)}
            icon={
              <CogIcon
                className={classNames(projectcss.all, sty.svg___8QyNf)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__kpa9A)}
            icon={
              <ShoppingCartIcon
                className={classNames(projectcss.all, sty.svg__aFjiB)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>
      <div
        className={classNames(projectcss.all, sty.freeBox__iGvVl, {
          [sty.freeBoxexpanded__iGvVlKEa9]: hasVariant(
            $state,
            "expanded",
            "expanded"
          )
        })}
      >
        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__eO4Ma)}
          text={"Home"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__u05UC)}
          text={"New Arrival"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__fEd6N)}
          text={"Features"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__q8Rjk)}
          text={"Blog"}
          type={"blankGray"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__bVzUy)}
          text={"Contact"}
          type={"blankGray"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuButton", "link", "img"],
  menuButton: ["menuButton"],
  link: ["link", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
