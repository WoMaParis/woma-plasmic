// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vNYHYdba5dDm6wfqFaSoQa
// Component: 52hQKlNbNjEe
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: RqdZFOU7xxIy/component
import ProductCarousel from "../../ProductCarousel"; // plasmic-import: CrcwKld3WEeO/component
import { ProductCollection } from "@plasmicpkgs/commerce";
import ProductCard from "../../ProductCard"; // plasmic-import: luLruh3ZQaYT/component
import { ProductMedia } from "@plasmicpkgs/commerce";
import FeatureItem from "../../FeatureItem"; // plasmic-import: eLMfPBLHlWhr/component
import BlogPost from "../../BlogPost"; // plasmic-import: 9UUCJIhfOozi/component
import Footer from "../../Footer"; // plasmic-import: teNxxVAntSrp/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_wo_ma.module.css"; // plasmic-import: vNYHYdba5dDm6wfqFaSoQa/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: 52hQKlNbNjEe/css

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const new$Queries = {
    projects: usePlasmicDataOp(() => {
      return {
        sourceId: "26y4A8RmubxbYUdLm9GJ8Z",
        opId: "70954f39-c825-4858-86e7-25e969d8f0b9",
        userArgs: {},
        cacheKey: `plasmic.$.70954f39-c825-4858-86e7-25e969d8f0b9.$.`,
        invalidatedKeys: null,
        roleId: "b7678e6c-d7e3-4538-90ad-857bb1cd177e"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__bca2T)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__c6Jl)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mv7Xm)}>
                <Header
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                />

                <ProductCarousel
                  data-plasmic-name={"productCarousel"}
                  data-plasmic-override={overrides.productCarousel}
                  className={classNames("__wab_instance", sty.productCarousel)}
                />
              </div>
            </p.Stack>
            <div className={classNames(projectcss.all, sty.freeBox__qQh1F)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zIp3M
                )}
              >
                {"New Arrivals"}
              </div>
            </div>
            <ProductCollection
              className={classNames(
                "__wab_instance",
                sty.productCollection__dHieS
              )}
              count={8}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zXcl3
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v06X0
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              search={""}
              sort={"latest-desc"}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard__ueOgs
                    )}
                    image={
                      <ProductMedia
                        className={classNames(
                          "__wab_instance",
                          sty.productMedia__wqE8
                        )}
                      />
                    }
                  />
                )}
              </ph.DataCtxReader>
            </ProductCollection>
            <FeatureItem
              data-plasmic-name={"featureItem"}
              data-plasmic-override={overrides.featureItem}
              className={classNames("__wab_instance", sty.featureItem)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__qY0R9)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4X1Ey
                )}
              >
                {"Featured Products"}
              </div>
            </div>
            <ProductCollection
              category={"626a86bfda5c2c00128ebdda"}
              className={classNames(
                "__wab_instance",
                sty.productCollection__dlo0M
              )}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fto2Z
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qYvqd
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <ProductCard
                    className={classNames(
                      "__wab_instance",
                      sty.productCard__cbT1
                    )}
                    image={
                      <ProductMedia
                        className={classNames(
                          "__wab_instance",
                          sty.productMedia__zFxc
                        )}
                      />
                    }
                  />
                )}
              </ph.DataCtxReader>
            </ProductCollection>
            <div className={classNames(projectcss.all, sty.freeBox___7WzTw)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lftx4
                )}
              >
                {"Latest Blog"}
              </div>
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__k35N7)}>
                <BlogPost
                  className={classNames("__wab_instance", sty.blogPost__foIsQ)}
                  image={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___3URuf)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/wo_ma/images/b1.jpg",
                        fullWidth: 370,
                        fullHeight: 250,
                        aspectRatio: undefined
                      }}
                    />
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__s1Oix)}>
                <BlogPost
                  className={classNames("__wab_instance", sty.blogPost___7JDxe)}
                  image={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__uiMjt)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/wo_ma/images/b2.jpg",
                        fullWidth: 370,
                        fullHeight: 250,
                        aspectRatio: undefined
                      }}
                    />
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___9VcKc)}>
                <BlogPost
                  className={classNames("__wab_instance", sty.blogPost__gUNn4)}
                  image={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___0ADng)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      src={{
                        src: "/plasmic/wo_ma/images/b3.jpg",
                        fullWidth: 370,
                        fullHeight: 250,
                        aspectRatio: undefined
                      }}
                    />
                  }
                />
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1P5YE)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__w1YbV)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"90px"}
                src={{
                  src: "/plasmic/wo_ma/images/adidas.png",
                  fullWidth: 90,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__lzOXt)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"91px"}
                src={{
                  src: "/plasmic/wo_ma/images/hm.png",
                  fullWidth: 91,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__sm1Aj)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"98px"}
                src={{
                  src: "/plasmic/wo_ma/images/kappa.png",
                  fullWidth: 98,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__qwR3E)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"124px"}
                src={{
                  src: "/plasmic/wo_ma/images/lacoste.png",
                  fullWidth: 124,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__mxWUd)}
                displayHeight={"60px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"125px"}
                src={{
                  src: "/plasmic/wo_ma/images/levis.png",
                  fullWidth: 125,
                  fullHeight: 60,
                  aspectRatio: undefined
                }}
              />
            </p.Stack>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "productCarousel",
    "featureItem",
    "columns",
    "footer"
  ],

  header: ["header"],
  productCarousel: ["productCarousel"],
  featureItem: ["featureItem"],
  columns: ["columns"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={"b7678e6c-d7e3-4538-90ad-857bb1cd177e"}
      appId={"vNYHYdba5dDm6wfqFaSoQa"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "vNYHYdba5dDm6wfqFaSoQa"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    productCarousel: makeNodeComponent("productCarousel"),
    featureItem: makeNodeComponent("featureItem"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
