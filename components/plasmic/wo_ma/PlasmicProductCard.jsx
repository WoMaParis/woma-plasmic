// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vNYHYdba5dDm6wfqFaSoQa
// Component: luLruh3ZQaYT
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductMedia } from "@plasmicpkgs/commerce";
import Ratings from "../../Ratings"; // plasmic-import: 5s29WsEddxfu/component
import { ProductTextField } from "@plasmicpkgs/commerce";
import { ProductPriceComponent } from "@plasmicpkgs/commerce";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_wo_ma.module.css"; // plasmic-import: vNYHYdba5dDm6wfqFaSoQa/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: luLruh3ZQaYT/css
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: q3XUa0zBBzVx/icon
import HeartOIcon from "./icons/PlasmicIcon__HeartO"; // plasmic-import: am99onfItBDy/icon
import ExpandIcon from "./icons/PlasmicIcon__Expand"; // plasmic-import: hM8jhQYP1Igk/icon

createPlasmicElementProxy;

export const PlasmicProductCard__VariantProps = new Array(
  "withReviews",
  "onSale"
);

export const PlasmicProductCard__ArgProps = new Array("image", "ratings");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "withReviews",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withReviews
      },
      {
        path: "onSale",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.onSale
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootonSale]: hasVariant($state, "onSale", "onSale"),
          [sty.rootwithReviews]: hasVariant(
            $state,
            "withReviews",
            "withReviews"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xuoev)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <ProductMedia
              className={classNames("__wab_instance", sty.productMedia__ieaEz)}
            />
          ),

          value: args.image
        })}
        <div
          className={classNames(projectcss.all, sty.freeBox__bMzl, {
            [sty.freeBoxonSale__bMzlWMqHr]: hasVariant(
              $state,
              "onSale",
              "onSale"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qzBbn
            )}
          >
            {"Sale"}
          </div>
        </div>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__tAutz)}
        >
          <ShoppingCartIcon
            className={classNames(projectcss.all, sty.svg___5Ya0C)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qWbps
            )}
          >
            {"Add to cart"}
          </div>
          <HeartOIcon
            className={classNames(projectcss.all, sty.svg__gcflK)}
            role={"img"}
          />

          <ExpandIcon
            className={classNames(projectcss.all, sty.svg__vYlHd)}
            role={"img"}
          />
        </p.Stack>
      </div>
      {p.renderPlasmicSlot({
        defaultContents: (
          <Ratings
            className={classNames("__wab_instance", sty.ratings___0ELhn)}
          />
        ),

        value: args.ratings
      })}
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__f4Dp)}
      >
        <ProductTextField
          data-plasmic-name={"productTextField"}
          data-plasmic-override={overrides.productTextField}
          className={classNames("__wab_instance", sty.productTextField)}
          field={"name"}
        />

        <ProductPriceComponent
          data-plasmic-name={"productPrice"}
          data-plasmic-override={overrides.productPrice}
          className={classNames("__wab_instance", sty.productPrice)}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "productTextField", "productPrice"],
  productTextField: ["productTextField"],
  productPrice: ["productPrice"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productTextField: makeNodeComponent("productTextField"),
    productPrice: makeNodeComponent("productPrice"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
