// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vNYHYdba5dDm6wfqFaSoQa
// Component: teNxxVAntSrp
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconLink from "../../IconLink"; // plasmic-import: MBWgER5ex-gd/component
import { useScreenVariants as useScreenVariantswIvKq52ZWu34 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: WIvKq52ZWu34/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_wo_ma.module.css"; // plasmic-import: vNYHYdba5dDm6wfqFaSoQa/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: teNxxVAntSrp/css
import LocationArrowIcon from "./icons/PlasmicIcon__LocationArrow"; // plasmic-import: xazIrTCWeuEW/icon
import FacebookIcon from "./icons/PlasmicIcon__Facebook"; // plasmic-import: RkzRoSopMXtY/icon
import InstagramIcon from "./icons/PlasmicIcon__Instagram"; // plasmic-import: RPhN3LzRCM0t/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: duJnv-JqudkJ/icon

createPlasmicElementProxy;

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswIvKq52ZWu34()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__egUa)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yscuf)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xx7G
            )}
          >
            {"Information"}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jiKsO)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___94Pb
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"About Us"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___4E3Vl
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Contact Us"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yA1I
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"News"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zCvr2
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Store"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ceXcf)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1NQbZ
            )}
          >
            {"Collections"}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bsn8L)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__izL9G
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Wooden Chair"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___4Mt2
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Royal Cloth Sofa"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wridv
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Accent Chair"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__bAiWq
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Bed"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__sqpPa
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Hanging Lamp"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aikG0)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qKIe
            )}
          >
            {"My Accounts"}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xR3Uf)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zurUj
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"My Account"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___2Bevd
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Wishlist"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__tf1Gr
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Community"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___8VJFr
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"Order History"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__w39Xs
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              {"My Cart"}
            </p.PlasmicLink>
          </p.Stack>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ioKpO)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zujQe
            )}
          >
            {"Newsletter"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__d9SYw
            )}
          >
            {"Subscribe to get latest news, updates, and information"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5PAiC)}>
            <input
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput ?? overrides.textbox}
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.textInput
              )}
              placeholder={"Enter Email Here..."}
              size={1}
              type={"text"}
              value={""}
            />

            <button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                projectcss.all,
                projectcss.button,
                sty.button
              )}
            >
              <LocationArrowIcon
                className={classNames(projectcss.all, sty.svg___3Qog)}
                role={"img"}
              />
            </button>
          </div>
        </p.Stack>
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__am8Va)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aijCv)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__kn2VI)}
            icon={
              <FacebookIcon
                className={classNames(projectcss.all, sty.svg___0GFzz)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__oa2Ql)}
            icon={
              <InstagramIcon
                className={classNames(projectcss.all, sty.svg__zjFaQ)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__pet5W)}
            icon={
              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__tuOmp)}
                role={"img"}
              />
            }
          />
        </p.Stack>
        <div className={classNames(projectcss.all, sty.freeBox__gQe3)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ivxXv
            )}
          >
            {"\u00a9 Copyright. "}
          </div>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__fkZax
            )}
            component={Link}
            href={"https://www.plasmic.app/"}
            platform={"nextjs"}
          >
            {"Made by Plasmic. "}
          </p.PlasmicLink>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__v8Eiw
            )}
            component={Link}
            href={"https://www.themesine.com/"}
            platform={"nextjs"}
          >
            {"Inspired by Themesine."}
          </p.PlasmicLink>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox", "button"],
  textInput: ["textInput", "textbox"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
